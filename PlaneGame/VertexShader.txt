#version 430 core

layout (location = 0) in vec2 position;
out vec2 texCoordOut;
out vec2 levelPositionOut;

uniform sampler2D tex_heightmap; 
uniform sampler2D tex_pixelmap; 

uniform int layerIndex;
uniform sampler2D tex_heightmap0;
uniform sampler2D tex_heightmap1;
uniform sampler2D tex_heightmap2;
uniform sampler2D tex_heightmap3;
uniform sampler2D tex_heightmap4;
uniform sampler2D tex_heightmap5;
uniform sampler2D tex_heightmap6;
uniform sampler2D tex_heightmap7;
uniform sampler2D tex_heightmap8;
uniform sampler2D tex_heightmap9;
uniform sampler2D tex_heightmap10;
uniform sampler2D tex_heightmap11;
uniform sampler2D tex_heightmap12;

uniform vec2 patchOrigin;
uniform vec2 levelScaleFactor;
uniform vec2 worldScaleFactor;
uniform vec2 worldOffset;
uniform mat4 modelView;
uniform vec2 hgtTexOffset;
uniform int n;


void main()
{
    float CONST_PIDIV180 = 0.01745329251;
    int earthRadius = 6378100;
	float x, y, z;
	vec2 texelValue;
	float positionX, positionY;



    vec2 levelPosition = position + patchOrigin;

	positionX = int(mod(levelPosition.x + hgtTexOffset.x, n - 1));// + 1;
	positionY = int(mod(levelPosition.y + hgtTexOffset.y, n - 1));// + 1;

    vec2 worldPosition = (levelPosition * levelScaleFactor * worldScaleFactor) + worldOffset;


    switch (layerIndex) {
	case 0:
		texelValue = texture(tex_heightmap0, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 1:
		texelValue = texture(tex_heightmap1, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 2:
		texelValue = texture(tex_heightmap2, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 3:
		texelValue = texture(tex_heightmap3, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 4:
		texelValue = texture(tex_heightmap4, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 5:										 
		texelValue = texture(tex_heightmap5, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 6:										 
		texelValue = texture(tex_heightmap6, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 7:										 
		texelValue = texture(tex_heightmap7, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 8:										 
		texelValue = texture(tex_heightmap8, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 9:										 
		texelValue = texture(tex_heightmap9, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 10:									 
		texelValue = texture(tex_heightmap10, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 11:									 
		texelValue = texture(tex_heightmap11, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 12:									 
		texelValue = texture(tex_heightmap12, vec2(positionX/n, positionY/n), 0).xy;
		break;
	} 
    

	
	int terrainHeight = int(texelValue.x*256+texelValue.y*65535);
	
    x = (earthRadius + terrainHeight) * sin(worldPosition.x * CONST_PIDIV180) * cos(worldPosition.y * CONST_PIDIV180);
    y = (earthRadius + terrainHeight) * sin(worldPosition.y * CONST_PIDIV180);
    z = (earthRadius + terrainHeight) * cos(worldPosition.x * CONST_PIDIV180) * cos(worldPosition.y * CONST_PIDIV180);


    levelPositionOut = levelPosition;
    gl_Position = modelView*vec4(x, y, z, 1.0);    
}
