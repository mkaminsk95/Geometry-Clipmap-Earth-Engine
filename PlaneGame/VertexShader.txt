#version 430 core

layout (location = 0) in vec2 position;
out vec2 texCoordOut;
out vec2 levelPositionOut;
out vec2 levelPositionFinerOut;

uniform sampler2D tex_heightmap; 
uniform sampler2D tex_pixelmap; 

uniform int layerIndex;
uniform sampler2D tex_heightmap0;
uniform sampler2D tex_heightmap1;
uniform sampler2D tex_heightmap2;
uniform sampler2D tex_heightmap3;
uniform sampler2D tex_heightmap4;
uniform sampler2D tex_heightmap5;
uniform sampler2D tex_heightmap6;
uniform sampler2D tex_heightmap7;
uniform sampler2D tex_heightmap8;
uniform sampler2D tex_heightmap9;
uniform sampler2D tex_heightmap10;
uniform sampler2D tex_heightmap11;
uniform sampler2D tex_heightmap12;

uniform vec2 patchOrigin;
uniform vec2 levelScaleFactor;
uniform vec2 worldScaleFactor;
uniform vec2 worldOffset;
uniform mat4 modelView;
uniform int n;

uniform vec2 hgtTexOffset;
uniform vec2 hgtTexOffsetFiner;

//uniforms for blending
uniform vec2 coarserInFinerOffset;
uniform float w;
uniform float distanceToBlendingArea;
uniform vec2 cameraPosition;
uniform int highestLvlOfDetail;

void main()
{
    float CONST_PIDIV180 = 0.01745329251;
    int earthRadius = 6378100;
	float x, y, z;
	float terrainHeight;
	vec2 texelValue, texelValueFnr;
	float positionX, positionY;
	float positionXCoarser, positionYCoarser;
	float blendingParam, blendingParamX, blendingParamY;
	
	//checking level position of both layers
	vec2 levelPositionFiner = 0.5 * (position + patchOrigin) + coarserInFinerOffset;
    vec2 levelPosition = position + patchOrigin;



	positionX = mod(levelPosition.x + hgtTexOffset.x, n);
	positionY = mod(levelPosition.y + hgtTexOffset.y, n);
    switch (layerIndex) {
	case 0:
		texelValue = texture(tex_heightmap0, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 1:
		texelValue = texture(tex_heightmap1, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 2:
		texelValue = texture(tex_heightmap2, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 3:
		texelValue = texture(tex_heightmap3, vec2(positionX/n, positionY/n), 0).xy;
		break;
	case 4:
		texelValue = texture(tex_heightmap4, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 5:										 
		texelValue = texture(tex_heightmap5, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 6:										 
		texelValue = texture(tex_heightmap6, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 7:										 
		texelValue = texture(tex_heightmap7, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 8:										 
		texelValue = texture(tex_heightmap8, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 9:										 
		texelValue = texture(tex_heightmap9, vec2(positionX/n, positionY/n),  0).xy;
		break;									 
	case 10:									 
		texelValue = texture(tex_heightmap10, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 11:									 
		texelValue = texture(tex_heightmap11, vec2(positionX/n, positionY/n), 0).xy;
		break;									 
	case 12:									 
		texelValue = texture(tex_heightmap12, vec2(positionX/n, positionY/n), 0).xy;
		break;
	} 

	if(highestLvlOfDetail > layerIndex){
	
		
		positionX = mod(levelPositionFiner.x + hgtTexOffsetFiner.x, n);
		positionY = mod(levelPositionFiner.y + hgtTexOffsetFiner.y, n);
		switch (layerIndex + 1) {
		case 0:
			texelValueFnr = texture(tex_heightmap0, vec2(positionX/n, positionY/n), 0).xy;
			break;
		case 1:
			texelValueFnr = texture(tex_heightmap1, vec2(positionX/n, positionY/n), 0).xy;
			break;
		case 2:
			texelValueFnr = texture(tex_heightmap2, vec2(positionX/n, positionY/n), 0).xy;
			break;
		case 3:
			texelValueFnr = texture(tex_heightmap3, vec2(positionX/n, positionY/n), 0).xy;
			break;
		case 4:
			texelValueFnr = texture(tex_heightmap4, vec2(positionX/n, positionY/n), 0).xy;
			break;									 
		case 5:										 
			texelValueFnr = texture(tex_heightmap5, vec2(positionX/n, positionY/n),  0).xy;
			break;									 
		case 6:										 
			texelValueFnr = texture(tex_heightmap6, vec2(positionX/n, positionY/n),  0).xy;
			break;									 
		case 7:										 
			texelValueFnr = texture(tex_heightmap7, vec2(positionX/n, positionY/n),  0).xy;
			break;									 
		case 8:										 
			texelValueFnr = texture(tex_heightmap8, vec2(positionX/n, positionY/n),  0).xy;
			break;									 
		case 9:										 
			texelValueFnr = texture(tex_heightmap9, vec2(positionX/n, positionY/n),  0).xy;
			break;									 
		case 10:									 
			texelValueFnr = texture(tex_heightmap10, vec2(positionX/n, positionY/n), 0).xy;
			break;									 
		case 11:									 
			texelValueFnr = texture(tex_heightmap11, vec2(positionX/n, positionY/n), 0).xy;
			break;									 
		case 12:									 
			texelValueFnr = texture(tex_heightmap12, vec2(positionX/n, positionY/n), 0).xy;
			break;
		} 

		//calculating blending parameter
		blendingParamX = clamp( ( abs(levelPosition.x-cameraPosition.x) - distanceToBlendingArea )/w ,0,1);
		blendingParamY = clamp( ( abs(levelPosition.y-cameraPosition.y) - distanceToBlendingArea )/w ,0,1);
		blendingParam = max( blendingParamX, blendingParamY);

		terrainHeight = mix( (texelValue.x*256+texelValue.y*65535), (texelValueFnr.x*256+texelValueFnr.y*65535), blendingParam);
	}
	else {
		terrainHeight = (texelValue.x*256+texelValue.y*65535);
	}



	//calculating layer position in cartesian coordinates
    vec2 worldPosition = (levelPosition * levelScaleFactor * worldScaleFactor) + worldOffset;

    x = (earthRadius + terrainHeight*4) * sin(worldPosition.x * CONST_PIDIV180) * cos(worldPosition.y * CONST_PIDIV180);
    y = (earthRadius + terrainHeight*4) * sin(worldPosition.y * CONST_PIDIV180);
    z = (earthRadius + terrainHeight*4) * cos(worldPosition.x * CONST_PIDIV180) * cos(worldPosition.y * CONST_PIDIV180);

	levelPositionFinerOut = levelPositionFiner;
    levelPositionOut = levelPosition;
    gl_Position = modelView*vec4(x, y, z, 1.0);    
}
