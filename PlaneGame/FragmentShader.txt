#version 430 core
layout (location = 0) in vec2 position;

out vec4 color;
in vec2 levelPositionOut;
in vec2 levelPositionFinerOut;

uniform int layerIndex;

uniform vec2 patchOrigin;
uniform vec2 rawTexOffset;
uniform vec2 rawTexOffsetFiner;
uniform int n;

uniform sampler2D tex_pixelmap0; 
uniform sampler2D tex_pixelmap1;
uniform sampler2D tex_pixelmap2;
uniform sampler2D tex_pixelmap3;
uniform sampler2D tex_pixelmap4;
uniform sampler2D tex_pixelmap5;
uniform sampler2D tex_pixelmap6;
uniform sampler2D tex_pixelmap7;
uniform sampler2D tex_pixelmap8;
uniform sampler2D tex_pixelmap9;
uniform sampler2D tex_pixelmap10;
uniform sampler2D tex_pixelmap11;
uniform sampler2D tex_pixelmap12;

//uniforms for blending
uniform vec2 coarserInFinerOffset;
uniform float w;
uniform float distanceToBlendingArea;
uniform vec2 cameraPosition;
uniform int highestLvlOfDetail;

void main()
{
	vec3 pixel, pixelFnr, pixelOut;
	float blendingParam, blendingParamX, blendingParamY;
	
	float texPosX, texPosY;

	texPosY = float(mod(levelPositionOut.y + rawTexOffset.y, n ));
	texPosX = float(mod(levelPositionOut.x + rawTexOffset.x, n ));
	switch (layerIndex) {
	case 0:
		pixel = texture( tex_pixelmap0, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 1:
		pixel = texture( tex_pixelmap1, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 2:
		pixel = texture( tex_pixelmap2, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 3:
		pixel = texture( tex_pixelmap3, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 4:
		pixel = texture( tex_pixelmap4, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 5:
		pixel = texture( tex_pixelmap5, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 6:
		pixel = texture( tex_pixelmap6, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 7:
		pixel = texture( tex_pixelmap7, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 8:
		pixel = texture( tex_pixelmap8, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 9:
		pixel = texture( tex_pixelmap9, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 10:
		pixel = texture( tex_pixelmap10, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 11:
		pixel = texture( tex_pixelmap11, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	case 12:
		pixel = texture( tex_pixelmap12, vec2(texPosX/n, texPosY/n), 0).rgb;
		break;
	}


	if(highestLvlOfDetail > layerIndex){
	
		
		texPosY = float(mod(levelPositionFinerOut.y + rawTexOffsetFiner.y, n ));
		texPosX = float(mod(levelPositionFinerOut.x + rawTexOffsetFiner.x, n ));
		switch (layerIndex + 1) {
		case 0:
			pixelFnr = texture(tex_pixelmap0, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;
		case 1:
			pixelFnr = texture(tex_pixelmap1, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;
		case 2:
			pixelFnr = texture(tex_pixelmap2, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;
		case 3:
			pixelFnr = texture(tex_pixelmap3, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;
		case 4:
			pixelFnr = texture(tex_pixelmap4, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;									 
		case 5:										 
			pixelFnr = texture(tex_pixelmap5, vec2(texPosX/n, texPosY/n),  0).rgb;
			break;									 
		case 6:										 
			pixelFnr = texture(tex_pixelmap6, vec2(texPosX/n, texPosY/n),  0).rgb;
			break;									 
		case 7:										 
			pixelFnr = texture(tex_pixelmap7, vec2(texPosX/n, texPosY/n),  0).rgb;
			break;									 
		case 8:										 
			pixelFnr = texture(tex_pixelmap8, vec2(texPosX/n, texPosY/n),  0).rgb;
			break;									 
		case 9:										 
			pixelFnr = texture(tex_pixelmap9, vec2(texPosX/n, texPosY/n),  0).rgb;
			break;									 
		case 10:									 
			pixelFnr = texture(tex_pixelmap10, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;									 
		case 11:									 
			pixelFnr = texture(tex_pixelmap11, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;									 
		case 12:									 
			pixelFnr = texture(tex_pixelmap12, vec2(texPosX/n, texPosY/n), 0).rgb;
			break;
		} 

		//calculating blending parameter
		blendingParamX = clamp( ( abs(levelPositionOut.x-cameraPosition.x) - distanceToBlendingArea )/w ,0,1);
		blendingParamY = clamp( ( abs(levelPositionOut.y-cameraPosition.y) - distanceToBlendingArea )/w ,0,1);
		blendingParam = max( blendingParamX, blendingParamY);

		pixelOut = mix( pixel, pixelFnr, blendingParam);
	}
	else {
		pixelOut = pixel;
	}


	color = vec4(pixelOut, 0);
}