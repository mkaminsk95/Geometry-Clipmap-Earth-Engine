#version 430 core
layout (location = 0) in vec2 position;

out vec4 color;
in vec2 levelPositionOut;
in vec2 levelPositionFnrOut;

uniform int levelIndex;

uniform vec2 patchOrigin;
uniform vec2 rawTexOffset;
uniform vec2 rawTexOffsetFnr;
uniform int n;

uniform sampler2D tex_pixelmap0; 
uniform sampler2D tex_pixelmap1;
uniform sampler2D tex_pixelmap2;
uniform sampler2D tex_pixelmap3;
uniform sampler2D tex_pixelmap4;
uniform sampler2D tex_pixelmap5;
uniform sampler2D tex_pixelmap6;
uniform sampler2D tex_pixelmap7;
uniform sampler2D tex_pixelmap8;
uniform sampler2D tex_pixelmap9;
uniform sampler2D tex_pixelmap10;
uniform sampler2D tex_pixelmap11;
uniform sampler2D tex_pixelmap12;

//uniforms for blending
uniform vec2 coarserInFinerOffset;
uniform float w;
uniform float distanceToBlendingArea;
uniform vec2 cameraPosition;
uniform int highestLvlOfDetail;

vec3 getTexelValue(int index, vec2 position) {
	
	vec3 texelValue;

	switch (index) {
	case 0:
		texelValue = texture(tex_pixelmap0, vec2(position.x/n, position.y/n), 0).rgb;
		break;
	case 1:
		texelValue = texture(tex_pixelmap1, vec2(position.x/n, position.y/n), 0).rgb;
		break;
	case 2:
		texelValue = texture(tex_pixelmap2, vec2(position.x/n, position.y/n), 0).rgb;
		break;
	case 3:
		texelValue = texture(tex_pixelmap3, vec2(position.x/n, position.y/n), 0).rgb;
		break;
	case 4:
		texelValue = texture(tex_pixelmap4, vec2(position.x/n, position.y/n), 0).rgb;
		break;									 
	case 5:										 
		texelValue = texture(tex_pixelmap5, vec2(position.x/n, position.y/n),  0).rgb;
		break;									 
	case 6:										 
		texelValue = texture(tex_pixelmap6, vec2(position.x/n, position.y/n),  0).rgb;
		break;									 
	case 7:										 
		texelValue = texture(tex_pixelmap7, vec2(position.x/n, position.y/n),  0).rgb;
		break;									 
	case 8:										 
		texelValue = texture(tex_pixelmap8, vec2(position.x/n, position.y/n),  0).rgb;
		break;									 
	case 9:										 
		texelValue = texture(tex_pixelmap9, vec2(position.x/n, position.y/n),  0).rgb;
		break;									 
	case 10:									 
		texelValue = texture(tex_pixelmap10, vec2(position.x/n, position.y/n), 0).rgb;
		break;									 
	case 11:									 
		texelValue = texture(tex_pixelmap11, vec2(position.x/n, position.y/n), 0).rgb;
		break;									 
	case 12:									 
		texelValue = texture(tex_pixelmap12, vec2(position.x/n, position.y/n), 0).rgb;
		break;
	}

	return texelValue;
}

void main()
{
	float blendingParam, blendingParamX, blendingParamY;
	vec3 pixel, pixelFnr, pixelOut;
	vec2 texPosition;

	texPosition.x = mod(levelPositionOut.x + rawTexOffset.x, n);
	texPosition.y = mod(levelPositionOut.y + rawTexOffset.y, n);
	
	pixel = getTexelValue(levelIndex, texPosition);


	if(highestLvlOfDetail > levelIndex){
	
		texPosition.x = mod(levelPositionFnrOut.x + rawTexOffsetFnr.x, n);
		texPosition.y = mod(levelPositionFnrOut.y + rawTexOffsetFnr.y, n);
		
		pixelFnr = getTexelValue(levelIndex + 1, texPosition);

		//calculating blending parameter
		blendingParamX = clamp( ( abs(levelPositionOut.x-cameraPosition.x) - distanceToBlendingArea )/w ,0,1);
		blendingParamY = clamp( ( abs(levelPositionOut.y-cameraPosition.y) - distanceToBlendingArea )/w ,0,1);
		blendingParam = max( blendingParamX, blendingParamY);


		pixelOut = mix( pixel, pixelFnr, blendingParam);
	}
	else {
		pixelOut = pixel;
	}


	color = vec4(pixelOut, 0);
}