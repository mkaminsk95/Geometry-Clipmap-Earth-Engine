#version 430 core
layout (location = 0) in vec2 position;

out vec4 color;
//in vec2 texCoordOut;
in vec2 levelPositionOut;

uniform int layerIndex;

uniform vec2 patchOrigin;
uniform vec2 rawTexOffset;
uniform int n;

uniform sampler2D tex_pixelmap0; 
uniform sampler2D tex_pixelmap1;
uniform sampler2D tex_pixelmap2;
uniform sampler2D tex_pixelmap3;
uniform sampler2D tex_pixelmap4;
uniform sampler2D tex_pixelmap5;
uniform sampler2D tex_pixelmap6;
uniform sampler2D tex_pixelmap7;
uniform sampler2D tex_pixelmap8;
uniform sampler2D tex_pixelmap9;
uniform sampler2D tex_pixelmap10;
uniform sampler2D tex_pixelmap11;
uniform sampler2D tex_pixelmap12;

void main()
{
	vec3 pixel;
	
	int texPosX = int(mod(levelPositionOut.x + rawTexOffset.x, n - 1));
	int texPosY = int(mod(levelPositionOut.y + rawTexOffset.y, n - 1));

	switch (layerIndex) {
	case 0:
		pixel = texelFetch( tex_pixelmap0, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 1:
		pixel = texelFetch( tex_pixelmap1, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 2:
		pixel = texelFetch( tex_pixelmap2, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 3:
		pixel = texelFetch( tex_pixelmap3, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 4:
		pixel = texelFetch( tex_pixelmap4, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 5:
		pixel = texelFetch( tex_pixelmap5, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 6:
		pixel = texelFetch( tex_pixelmap6, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 7:
		pixel = texelFetch( tex_pixelmap7, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 8:
		pixel = texelFetch( tex_pixelmap8, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 9:
		pixel = texelFetch( tex_pixelmap9, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 10:
		pixel = texelFetch( tex_pixelmap10, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 11:
		pixel = texelFetch( tex_pixelmap11, ivec2(texPosX, texPosY), 0).rgb;
		break;
	case 12:
		pixel = texelFetch( tex_pixelmap12, ivec2(texPosX, texPosY), 0).rgb;
		break;
	}

	color = vec4(pixel, 0);
}